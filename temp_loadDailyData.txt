  const loadDailyData = async () => {
    try {
      console.log('Loading charity data for filter:', selectedFilter);
      
      if (selectedFilter === 'today') {
        // Load data for today
        const dateStr = formatDateForAPI(selectedDate);
        console.log('Loading today charity data for:', dateStr);
        const result = await getDailyCharity(dateStr);
        setDailySummary(result);
      } else if (selectedFilter === 'week') {
        // Load data for the last 7 days
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(endDate.getDate() - 6); // Last 7 days
        
        const startDateStr = formatDateForAPI(startDate);
        const endDateStr = formatDateForAPI(endDate);
        console.log('Loading week charity data from:', startDateStr, 'to:', endDateStr);
        
        const rangeData = await getCharityRange(startDateStr, endDateStr);
        // Convert range data to daily summary format
        setDailySummary({
          date: `${startDateStr} to ${endDateStr}`,
          total_daily: rangeData.total_range,
          charity_summary: rangeData.charity_summary,
          entries: rangeData.entries
        });
      } else if (selectedFilter === 'month') {
        // Load data for the last 30 days
        const endDate = new Date();
        const startDate = new Date();
        startDate.setDate(endDate.getDate() - 29); // Last 30 days
        
        const startDateStr = formatDateForAPI(startDate);
        const endDateStr = formatDateForAPI(endDate);
        console.log('Loading month charity data from:', startDateStr, 'to:', endDateStr);
        
        const rangeData = await getCharityRange(startDateStr, endDateStr);
        // Convert range data to daily summary format
        setDailySummary({
          date: `${startDateStr} to ${endDateStr}`,
          total_daily: rangeData.total_range,
          charity_summary: rangeData.charity_summary,
          entries: rangeData.entries
        });
      } else if (selectedFilter === 'select' && customStartDate && customEndDate) {
        // Load data for custom date range
        const startDateStr = formatDateForAPI(customStartDate);
        const endDateStr = formatDateForAPI(customEndDate);
        console.log('Loading custom range charity data from:', startDateStr, 'to:', endDateStr);
        
        const rangeData = await getCharityRange(startDateStr, endDateStr);
        // Convert range data to daily summary format
        setDailySummary({
          date: `${startDateStr} to ${endDateStr}`,
          total_daily: rangeData.total_range,
          charity_summary: rangeData.charity_summary,
          entries: rangeData.entries
        });
      } else {
        // Fallback to today's data
        const dateStr = formatDateForAPI(selectedDate);
        console.log('Loading fallback charity data for:', dateStr);
        const result = await getDailyCharity(dateStr);
        setDailySummary(result);
      }
    } catch (error) {
      console.error('Error loading charity data:', error);
      // Set empty summary on error
      setDailySummary({
        date: formatDateForAPI(selectedDate),
        total_daily: 0,
        charity_summary: {},
        entries: []
      });
    }
  };